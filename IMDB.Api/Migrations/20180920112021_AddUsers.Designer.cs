// <auto-generated />
using System;
using IMDB.Api.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IMDB.Api.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20180920112021_AddUsers")]
    partial class AddUsers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IMDB.Api.Entities.ContentRating", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("ContentRatings");
                });

            modelBuilder.Entity("IMDB.Api.Entities.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("IMDB.Api.Entities.Genre", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("IMDB.Api.Entities.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("IMDB.Api.Entities.Movie", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("AspectRatio");

                    b.Property<long>("Budget");

                    b.Property<long>("ContentRatingId");

                    b.Property<long>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("DirectorId");

                    b.Property<int>("Duration");

                    b.Property<long>("Gross");

                    b.Property<string>("ImdbLink")
                        .IsRequired();

                    b.Property<float>("ImdbScore");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("LanguageId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("ContentRatingId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DirectorId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("IMDB.Api.Entities.MovieGenre", b =>
                {
                    b.Property<long>("MovieId");

                    b.Property<long>("GenreId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("MovieId", "GenreId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("MovieGenres");
                });

            modelBuilder.Entity("IMDB.Api.Entities.MoviePerson", b =>
                {
                    b.Property<long>("MovieId");

                    b.Property<long>("PersonId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("MovieId", "PersonId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("MoviePersons");
                });

            modelBuilder.Entity("IMDB.Api.Entities.MoviePlotKeyword", b =>
                {
                    b.Property<long>("MovieId");

                    b.Property<long>("PlotKeywordId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("MovieId", "PlotKeywordId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("PlotKeywordId");

                    b.ToTable("MoviePlotKeywords");
                });

            modelBuilder.Entity("IMDB.Api.Entities.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("IMDB.Api.Entities.PlotKeyword", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("PlotKeywords");
                });

            modelBuilder.Entity("IMDB.Api.Entities.Movie", b =>
                {
                    b.HasOne("IMDB.Api.Entities.ContentRating", "ContentRating")
                        .WithMany("Movies")
                        .HasForeignKey("ContentRatingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMDB.Api.Entities.Country", "Country")
                        .WithMany("Movies")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMDB.Api.Entities.Person", "Director")
                        .WithMany("DirectedMovies")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMDB.Api.Entities.Language", "Language")
                        .WithMany("Movies")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMDB.Api.Entities.MovieGenre", b =>
                {
                    b.HasOne("IMDB.Api.Entities.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMDB.Api.Entities.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMDB.Api.Entities.MoviePerson", b =>
                {
                    b.HasOne("IMDB.Api.Entities.Movie", "Movie")
                        .WithMany("MoviePersons")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMDB.Api.Entities.Person", "Person")
                        .WithMany("MoviePersons")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMDB.Api.Entities.MoviePlotKeyword", b =>
                {
                    b.HasOne("IMDB.Api.Entities.Movie", "Movie")
                        .WithMany("MoviePlotKeywords")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMDB.Api.Entities.PlotKeyword", "PlotKeyword")
                        .WithMany("MoviePlotKeywords")
                        .HasForeignKey("PlotKeywordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
